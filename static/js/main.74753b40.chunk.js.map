{"version":3,"sources":["components/CardList.tsx","components/CardForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardList","todos","toogleComplete","map","todo","className","type","onChange","checked","check","id","text","CardForm","addTodo","useState","newTodo","setNewTodo","name","placeholder","value","e","target","onClick","preventDefault","App","setTodos","selectedTodo","updateTodos","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAYe,SAASA,EAAT,GAA6D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,eAEtC,OAAO,mCACFD,EAAME,KAAI,SAACC,GAAD,OACP,sBAAKC,UAAU,OAAf,UACI,uBACIC,KAAK,WACLD,UAAU,cACVE,SAAU,kBAAML,EAAeE,IAC/BI,QAASJ,EAAKK,QAElB,sBAAMC,GAAG,SAASL,UAAWD,EAAKK,MAAQ,mBAAqB,SAA/D,SAA0EL,EAAKO,OAC/E,cAAC,IAAD,CAAwBD,GAAG,aAAaL,UAAU,kBCbnD,SAASO,EAAT,GAA+C,IAA3BC,EAA0B,EAA1BA,QAE/B,EAA8BC,mBAAiB,IAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KAaA,OAAO,mCACH,uBAAMX,UAAU,YAAhB,UACI,uBAAOC,KAAK,OACRW,KAAK,UACLP,GAAG,YACHQ,YAAY,SACZC,MAAOJ,EACPR,SAjBZ,SAAsBa,GAClBJ,EAAWI,EAAEC,OAAOF,UAkBhB,cAAC,IAAD,CAAeG,QAfvB,SAAsBF,GAClBA,EAAEG,iBACFV,EAAQE,GACRC,EAAW,YCjBJ,SAASQ,IAEtB,MAA0BV,mBAAsB,IAAhD,mBAAOb,EAAP,KAAcwB,EAAd,KAkBA,OAAO,mCACL,sBAAKpB,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,wBACA,cAACO,EAAD,CAAUC,QAnBW,SAAAE,GACP,KAAZA,GACFU,EAAS,GAAD,mBAAKxB,GAAL,CAAY,CAAEU,KAAMI,EAASN,OAAO,SAkB5C,cAACT,EAAD,CAAUC,MAAOA,EAAOC,eAdW,SAAAwB,GACrC,IAAMC,EAAc1B,EAAME,KAAI,SAAAC,GAC5B,OAAIA,IAASsB,EACJ,2BAAKtB,GAAZ,IAAkBK,OAAQL,EAAKK,QAE1BL,KAETqB,EAASE,WCrBb,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.74753b40.chunk.js","sourcesContent":["import \"./Component.css\"\r\nimport {\r\n    MdOutlineDeleteOutline,\r\n} from 'react-icons/all';\r\n\r\n\r\ninterface TodoListProps {\r\n    todos: Array<Todo>\r\n    toogleComplete: ToogleComplete\r\n}\r\n\r\n\r\nexport default function CardList({ todos, toogleComplete }: TodoListProps) {\r\n\r\n    return <>\r\n        {todos.map((todo) => (\r\n            <div className=\"card\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    className=\"checktoogle\"\r\n                    onChange={() => toogleComplete(todo)}\r\n                    checked={todo.check}\r\n                />\r\n                <span id=\"center\" className={todo.check ? \"float overstrike\" : \"float \"}>{todo.text}</span>\r\n                <MdOutlineDeleteOutline id=\"icon-right\" className=\"float\" />\r\n            </div>\r\n        ))}\r\n\r\n    </>\r\n};","import \"../App.css\";\r\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\r\nimport {\r\n    MdPlaylistAdd,\r\n} from 'react-icons/all';\r\n\r\ninterface TodoFormProps {\r\n    addTodo: AddTodo;\r\n}\r\n\r\n\r\nexport default function CardForm({ addTodo }: TodoFormProps) {\r\n\r\n    const [newTodo, setNewTodo] = useState<string>(\"\")\r\n\r\n\r\n    function handleChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setNewTodo(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e: FormEvent<Element>) {\r\n        e.preventDefault()\r\n        addTodo(newTodo)\r\n        setNewTodo(\"\")\r\n    }\r\n\r\n    return <>\r\n        <form className=\"input-add\">\r\n            <input type=\"text\"\r\n                name=\"todoadd\"\r\n                id=\"inputtodo\"\r\n                placeholder=\"Add...\"\r\n                value={newTodo}\r\n                onChange={handleChange}\r\n            />\r\n            <MdPlaylistAdd onClick={handleSubmit} />\r\n        </form>\r\n\r\n    </>\r\n}","import './App.css';\nimport CardList from \"./components/CardList\"\nimport { useState } from 'react';\nimport CardForm from './components/CardForm';\n\n\nexport default function App() {\n\n  const [todos, setTodos] = useState<Array<Todo>>([])\n\n  const addTodo: AddTodo = newTodo => {\n    if (newTodo !== \"\") {\n      setTodos([...todos, { text: newTodo, check: false }])\n    }\n  }\n\n  const toogleComplete: ToogleComplete = selectedTodo => {\n    const updateTodos = todos.map(todo => {\n      if (todo === selectedTodo) {\n        return { ...todo, check: !todo.check }\n      }\n      return todo\n    })\n    setTodos(updateTodos)\n  }\n\n  return <>\n    <div className=\"App\">\n      <h1 className=\"title\">To do List</h1>\n      <CardForm addTodo={addTodo} />\n      <CardList todos={todos} toogleComplete={toogleComplete} />\n    </div>\n  </>\n};\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}